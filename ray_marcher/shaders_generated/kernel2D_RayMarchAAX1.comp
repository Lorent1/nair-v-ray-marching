#version 460
#extension GL_GOOGLE_include_directive : require

#include "common_generated.h"

layout(binding = 0, set = 0) buffer data0 { uint out_color[]; }; //
layout(binding = 1, set = 0) buffer dataUBO { RayMarcher_Generated_UBO_Data ubo; };

vec3 render(vec2 uv, int x, int y) {
    vec3 ro = vec3(ubo._ro.x,ubo._ro.y,ubo._ro.z);
    vec3 rd = getCam(ro, ubo._lookAt) * normalize(vec3(uv.x,uv.y,ubo.FOV));

    vec3 background = vec3(0.4f,0.7f,0.9f);
    vec3 pixel = vec3(0.0f);
    vec4 pixelInfo; // color(r, g, b), distance;

    vec3 p;
    float t = 0.0f;

    for (int i = 0; i < 500; i++) {
        p = ro + rd * t;
        pixelInfo = map(p);

        t += pixelInfo.w; // distance
        if (t > 50 || pixelInfo.w < 1e-3) break;
    }

    if (t < 50){
        pixel = getLight(p, rd, vec3(pixelInfo.x,pixelInfo.y,pixelInfo.z));
        pixel = mix(pixel, background, 1.0f - exp(-1e-4 * t * t * t));
    }else {
        pixel = background/pixelInfo.w - max(0.9f * rd.y, 0.0f);
    }

    return pixel;
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

layout(local_size_x = 32, local_size_y = 8, local_size_z = 1) in;

layout( push_constant ) uniform kernelArgs
{
  uint height; 
  uint width; 
  uint iNumElementsZ; 
  uint tFlagsMask;    
} kgenArgs;


void main()
{
  bool runThisThread = true;
  ///////////////////////////////////////////////////////////////// prolog
  const uint y = uint(gl_GlobalInvocationID[0]); 
  const uint x = uint(gl_GlobalInvocationID[1]); 
  if(y >= kgenArgs.height + 0 || x >= kgenArgs.width + 0)
    runThisThread = false;
    ///////////////////////////////////////////////////////////////// prolog
  if(runThisThread)
  {
  
            vec2 uv = getUV(vec2(0.0f), int(x), int(y), int(kgenArgs.width), int(kgenArgs.height));
            vec3 pixel = render(uv, int(x), int(y));

            out_color[y * kgenArgs.width + x] = RealColorToUint32(vec4(pixel.x,pixel.y,pixel.z,1.0f));
        
  }
}

